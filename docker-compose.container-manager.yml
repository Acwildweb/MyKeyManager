# =========================================================================
# MyKeyManager All-in-One Docker Compose
# Ready for Docker Container Managers (Portainer, Docker Desktop, etc.)
# =========================================================================

services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: mykeymanager-db
    environment:
      POSTGRES_DB: mykeymanager
      POSTGRES_USER: mykeymanager
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SecurePass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mykeymanager -d mykeymanager"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mykeymanager-network
    labels:
      - "com.mykeymanager.service=database"
      - "com.mykeymanager.version=v1.1.2"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mykeymanager-redis
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mykeymanager-network
    labels:
      - "com.mykeymanager.service=cache"
      - "com.mykeymanager.version=v1.1.2"

  # Backend API
  backend:
    image: acwild/mykeymanager-backend:v1.1.2
    container_name: mykeymanager-backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://mykeymanager:${POSTGRES_PASSWORD:-SecurePass123}@db:5432/mykeymanager
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      CORS_ORIGINS: '["http://localhost:${FRONTEND_PORT:-8080}"]'
      APP_VERSION: v1.1.2
      # SMTP Configuration (Optional)
      SMTP_SERVER: ${SMTP_SERVER:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@your-domain.com}
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mykeymanager-network
    labels:
      - "com.mykeymanager.service=backend"
      - "com.mykeymanager.version=v1.1.2"

  # Frontend Web Interface
  frontend:
    image: acwild/mykeymanager-frontend:v1.1.1
    container_name: mykeymanager-frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_URL: http://localhost:${BACKEND_PORT:-8001}/api
      VITE_APP_VERSION: v1.1.1
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mykeymanager-network
    labels:
      - "com.mykeymanager.service=frontend"
      - "com.mykeymanager.version=v1.1.2"

volumes:
  postgres_data:
    driver: local
    name: mykeymanager_postgres_data
    labels:
      - "com.mykeymanager.volume=database"
  redis_data:
    driver: local
    name: mykeymanager_redis_data
    labels:
      - "com.mykeymanager.volume=cache"

networks:
  mykeymanager-network:
    driver: bridge
    labels:
      - "com.mykeymanager.network=main"
