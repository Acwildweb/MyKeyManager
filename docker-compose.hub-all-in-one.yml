# =========================================================================
# MyKeyManager All-in-One Docker Hub Deployment
# Uses pre-built images from Docker Hub for instant deployment
# =========================================================================

services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: mykeymanager-db
    environment:
      POSTGRES_DB: mykeymanager
      POSTGRES_USER: mykeymanager
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMe123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mykeymanager -d mykeymanager"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mykeymanager-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    image: acwild/mykeymanager-backend:v1.1.2
    container_name: mykeymanager-backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://mykeymanager:${POSTGRES_PASSWORD:-ChangeMe123}@db:5432/mykeymanager
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      CORS_ORIGINS: '["http://localhost:${FRONTEND_PORT:-3000}"]'
      APP_VERSION: v1.1.1
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend + Nginx
  frontend:
    image: acwild/mykeymanager-frontend:v1.1.1
    container_name: mykeymanager-frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_URL: http://localhost:${BACKEND_PORT:-8000}/api
      VITE_APP_VERSION: v1.1.1
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # SMTP Server (Optional - commented out for quick start)
  # smtp:
  #   image: juanluisbaptiste/postfix:latest
  #   container_name: mykeymanager-smtp
  #   environment:
  #     SMTP_SERVER: ${SMTP_SERVER:-localhost}
  #     SMTP_USERNAME: ${SMTP_USERNAME:-}
  #     SMTP_PASSWORD: ${SMTP_PASSWORD_SMTP:-}
  #     SERVER_HOSTNAME: mykeymanager-smtp
  #   ports:
  #     - "${SMTP_PORT:-25}:25"
  #     - "${SMTP_SUBMISSION_PORT:-587}:587"
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
    name: mykeymanager_postgres_data
  redis_data:
    driver: local
    name: mykeymanager_redis_data

networks:
  default:
    name: mykeymanager-network
    driver: bridge

# =========================================================================
# Labels for management
# =========================================================================
x-labels: &default-labels
  com.mykeymanager.service: "all-in-one-compose"
  com.mykeymanager.version: "v1.1.1"
  com.mykeymanager.description: "Complete license management system"
